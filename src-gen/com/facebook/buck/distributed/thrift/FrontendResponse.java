/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-05")
public class FrontendResponse implements org.apache.thrift.TBase<FrontendResponse, FrontendResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FrontendResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FrontendResponse");

  private static final org.apache.thrift.protocol.TField WAS_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("wasSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_BUILD_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("startBuildResponse", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField BUILD_STATUS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("buildStatusResponse", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CAS_CONTAINS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("casContainsResponse", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_BUILD_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("createBuildResponse", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField FETCH_SOURCE_FILES_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSourceFilesResponse", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField FETCH_BUILD_GRAPH_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchBuildGraphResponse", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField ANNOUNCEMENT_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("announcementResponse", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiGetBuildSlaveLogDirResponse", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiGetBuildSlaveRealTimeLogsResponse", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_BUILD_SLAVE_STATUS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateBuildSlaveStatusResponse", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField FETCH_BUILD_SLAVE_STATUS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchBuildSlaveStatusResponse", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField APPEND_BUILD_SLAVE_EVENTS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("appendBuildSlaveEventsResponse", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiGetBuildSlaveEventsResponse", org.apache.thrift.protocol.TType.STRUCT, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FrontendResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FrontendResponseTupleSchemeFactory());
  }

  public boolean wasSuccessful; // optional
  public String errorMessage; // optional
  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType type; // optional
  public StartBuildResponse startBuildResponse; // optional
  public BuildStatusResponse buildStatusResponse; // optional
  public CASContainsResponse casContainsResponse; // optional
  public CreateBuildResponse createBuildResponse; // optional
  public FetchSourceFilesResponse fetchSourceFilesResponse; // optional
  public FetchBuildGraphResponse fetchBuildGraphResponse; // optional
  public AnnouncementResponse announcementResponse; // optional
  public MultiGetBuildSlaveLogDirResponse multiGetBuildSlaveLogDirResponse; // optional
  public MultiGetBuildSlaveRealTimeLogsResponse multiGetBuildSlaveRealTimeLogsResponse; // optional
  public UpdateBuildSlaveStatusResponse updateBuildSlaveStatusResponse; // optional
  public FetchBuildSlaveStatusResponse fetchBuildSlaveStatusResponse; // optional
  public AppendBuildSlaveEventsResponse appendBuildSlaveEventsResponse; // optional
  public MultiGetBuildSlaveEventsResponse multiGetBuildSlaveEventsResponse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAS_SUCCESSFUL((short)1, "wasSuccessful"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    /**
     * 
     * @see FrontendRequestType
     */
    TYPE((short)10, "type"),
    START_BUILD_RESPONSE((short)11, "startBuildResponse"),
    BUILD_STATUS_RESPONSE((short)12, "buildStatusResponse"),
    CAS_CONTAINS_RESPONSE((short)15, "casContainsResponse"),
    CREATE_BUILD_RESPONSE((short)16, "createBuildResponse"),
    FETCH_SOURCE_FILES_RESPONSE((short)17, "fetchSourceFilesResponse"),
    FETCH_BUILD_GRAPH_RESPONSE((short)18, "fetchBuildGraphResponse"),
    ANNOUNCEMENT_RESPONSE((short)19, "announcementResponse"),
    MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE((short)20, "multiGetBuildSlaveLogDirResponse"),
    MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE((short)21, "multiGetBuildSlaveRealTimeLogsResponse"),
    UPDATE_BUILD_SLAVE_STATUS_RESPONSE((short)22, "updateBuildSlaveStatusResponse"),
    FETCH_BUILD_SLAVE_STATUS_RESPONSE((short)23, "fetchBuildSlaveStatusResponse"),
    APPEND_BUILD_SLAVE_EVENTS_RESPONSE((short)24, "appendBuildSlaveEventsResponse"),
    MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE((short)25, "multiGetBuildSlaveEventsResponse");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAS_SUCCESSFUL
          return WAS_SUCCESSFUL;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 10: // TYPE
          return TYPE;
        case 11: // START_BUILD_RESPONSE
          return START_BUILD_RESPONSE;
        case 12: // BUILD_STATUS_RESPONSE
          return BUILD_STATUS_RESPONSE;
        case 15: // CAS_CONTAINS_RESPONSE
          return CAS_CONTAINS_RESPONSE;
        case 16: // CREATE_BUILD_RESPONSE
          return CREATE_BUILD_RESPONSE;
        case 17: // FETCH_SOURCE_FILES_RESPONSE
          return FETCH_SOURCE_FILES_RESPONSE;
        case 18: // FETCH_BUILD_GRAPH_RESPONSE
          return FETCH_BUILD_GRAPH_RESPONSE;
        case 19: // ANNOUNCEMENT_RESPONSE
          return ANNOUNCEMENT_RESPONSE;
        case 20: // MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE
          return MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE;
        case 21: // MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE
          return MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE;
        case 22: // UPDATE_BUILD_SLAVE_STATUS_RESPONSE
          return UPDATE_BUILD_SLAVE_STATUS_RESPONSE;
        case 23: // FETCH_BUILD_SLAVE_STATUS_RESPONSE
          return FETCH_BUILD_SLAVE_STATUS_RESPONSE;
        case 24: // APPEND_BUILD_SLAVE_EVENTS_RESPONSE
          return APPEND_BUILD_SLAVE_EVENTS_RESPONSE;
        case 25: // MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE
          return MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WASSUCCESSFUL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WAS_SUCCESSFUL,_Fields.ERROR_MESSAGE,_Fields.TYPE,_Fields.START_BUILD_RESPONSE,_Fields.BUILD_STATUS_RESPONSE,_Fields.CAS_CONTAINS_RESPONSE,_Fields.CREATE_BUILD_RESPONSE,_Fields.FETCH_SOURCE_FILES_RESPONSE,_Fields.FETCH_BUILD_GRAPH_RESPONSE,_Fields.ANNOUNCEMENT_RESPONSE,_Fields.MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE,_Fields.MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE,_Fields.UPDATE_BUILD_SLAVE_STATUS_RESPONSE,_Fields.FETCH_BUILD_SLAVE_STATUS_RESPONSE,_Fields.APPEND_BUILD_SLAVE_EVENTS_RESPONSE,_Fields.MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAS_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("wasSuccessful", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendRequestType.class)));
    tmpMap.put(_Fields.START_BUILD_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("startBuildResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartBuildResponse.class)));
    tmpMap.put(_Fields.BUILD_STATUS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("buildStatusResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildStatusResponse.class)));
    tmpMap.put(_Fields.CAS_CONTAINS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("casContainsResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CASContainsResponse.class)));
    tmpMap.put(_Fields.CREATE_BUILD_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("createBuildResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreateBuildResponse.class)));
    tmpMap.put(_Fields.FETCH_SOURCE_FILES_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("fetchSourceFilesResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FetchSourceFilesResponse.class)));
    tmpMap.put(_Fields.FETCH_BUILD_GRAPH_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("fetchBuildGraphResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FetchBuildGraphResponse.class)));
    tmpMap.put(_Fields.ANNOUNCEMENT_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("announcementResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnnouncementResponse.class)));
    tmpMap.put(_Fields.MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("multiGetBuildSlaveLogDirResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiGetBuildSlaveLogDirResponse.class)));
    tmpMap.put(_Fields.MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("multiGetBuildSlaveRealTimeLogsResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiGetBuildSlaveRealTimeLogsResponse.class)));
    tmpMap.put(_Fields.UPDATE_BUILD_SLAVE_STATUS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("updateBuildSlaveStatusResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UpdateBuildSlaveStatusResponse.class)));
    tmpMap.put(_Fields.FETCH_BUILD_SLAVE_STATUS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("fetchBuildSlaveStatusResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FetchBuildSlaveStatusResponse.class)));
    tmpMap.put(_Fields.APPEND_BUILD_SLAVE_EVENTS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("appendBuildSlaveEventsResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendBuildSlaveEventsResponse.class)));
    tmpMap.put(_Fields.MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("multiGetBuildSlaveEventsResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiGetBuildSlaveEventsResponse.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FrontendResponse.class, metaDataMap);
  }

  public FrontendResponse() {
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FrontendResponse(FrontendResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wasSuccessful = other.wasSuccessful;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStartBuildResponse()) {
      this.startBuildResponse = new StartBuildResponse(other.startBuildResponse);
    }
    if (other.isSetBuildStatusResponse()) {
      this.buildStatusResponse = new BuildStatusResponse(other.buildStatusResponse);
    }
    if (other.isSetCasContainsResponse()) {
      this.casContainsResponse = new CASContainsResponse(other.casContainsResponse);
    }
    if (other.isSetCreateBuildResponse()) {
      this.createBuildResponse = new CreateBuildResponse(other.createBuildResponse);
    }
    if (other.isSetFetchSourceFilesResponse()) {
      this.fetchSourceFilesResponse = new FetchSourceFilesResponse(other.fetchSourceFilesResponse);
    }
    if (other.isSetFetchBuildGraphResponse()) {
      this.fetchBuildGraphResponse = new FetchBuildGraphResponse(other.fetchBuildGraphResponse);
    }
    if (other.isSetAnnouncementResponse()) {
      this.announcementResponse = new AnnouncementResponse(other.announcementResponse);
    }
    if (other.isSetMultiGetBuildSlaveLogDirResponse()) {
      this.multiGetBuildSlaveLogDirResponse = new MultiGetBuildSlaveLogDirResponse(other.multiGetBuildSlaveLogDirResponse);
    }
    if (other.isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
      this.multiGetBuildSlaveRealTimeLogsResponse = new MultiGetBuildSlaveRealTimeLogsResponse(other.multiGetBuildSlaveRealTimeLogsResponse);
    }
    if (other.isSetUpdateBuildSlaveStatusResponse()) {
      this.updateBuildSlaveStatusResponse = new UpdateBuildSlaveStatusResponse(other.updateBuildSlaveStatusResponse);
    }
    if (other.isSetFetchBuildSlaveStatusResponse()) {
      this.fetchBuildSlaveStatusResponse = new FetchBuildSlaveStatusResponse(other.fetchBuildSlaveStatusResponse);
    }
    if (other.isSetAppendBuildSlaveEventsResponse()) {
      this.appendBuildSlaveEventsResponse = new AppendBuildSlaveEventsResponse(other.appendBuildSlaveEventsResponse);
    }
    if (other.isSetMultiGetBuildSlaveEventsResponse()) {
      this.multiGetBuildSlaveEventsResponse = new MultiGetBuildSlaveEventsResponse(other.multiGetBuildSlaveEventsResponse);
    }
  }

  public FrontendResponse deepCopy() {
    return new FrontendResponse(this);
  }

  @Override
  public void clear() {
    setWasSuccessfulIsSet(false);
    this.wasSuccessful = false;
    this.errorMessage = null;
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

    this.startBuildResponse = null;
    this.buildStatusResponse = null;
    this.casContainsResponse = null;
    this.createBuildResponse = null;
    this.fetchSourceFilesResponse = null;
    this.fetchBuildGraphResponse = null;
    this.announcementResponse = null;
    this.multiGetBuildSlaveLogDirResponse = null;
    this.multiGetBuildSlaveRealTimeLogsResponse = null;
    this.updateBuildSlaveStatusResponse = null;
    this.fetchBuildSlaveStatusResponse = null;
    this.appendBuildSlaveEventsResponse = null;
    this.multiGetBuildSlaveEventsResponse = null;
  }

  public boolean isWasSuccessful() {
    return this.wasSuccessful;
  }

  public FrontendResponse setWasSuccessful(boolean wasSuccessful) {
    this.wasSuccessful = wasSuccessful;
    setWasSuccessfulIsSet(true);
    return this;
  }

  public void unsetWasSuccessful() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  /** Returns true if field wasSuccessful is set (has been assigned a value) and false otherwise */
  public boolean isSetWasSuccessful() {
    return EncodingUtils.testBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  public void setWasSuccessfulIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID, value);
  }

  public String getErrorMessage() {
    return this.errorMessage;
  }

  public FrontendResponse setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendResponse setType(FrontendRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public StartBuildResponse getStartBuildResponse() {
    return this.startBuildResponse;
  }

  public FrontendResponse setStartBuildResponse(StartBuildResponse startBuildResponse) {
    this.startBuildResponse = startBuildResponse;
    return this;
  }

  public void unsetStartBuildResponse() {
    this.startBuildResponse = null;
  }

  /** Returns true if field startBuildResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetStartBuildResponse() {
    return this.startBuildResponse != null;
  }

  public void setStartBuildResponseIsSet(boolean value) {
    if (!value) {
      this.startBuildResponse = null;
    }
  }

  public BuildStatusResponse getBuildStatusResponse() {
    return this.buildStatusResponse;
  }

  public FrontendResponse setBuildStatusResponse(BuildStatusResponse buildStatusResponse) {
    this.buildStatusResponse = buildStatusResponse;
    return this;
  }

  public void unsetBuildStatusResponse() {
    this.buildStatusResponse = null;
  }

  /** Returns true if field buildStatusResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildStatusResponse() {
    return this.buildStatusResponse != null;
  }

  public void setBuildStatusResponseIsSet(boolean value) {
    if (!value) {
      this.buildStatusResponse = null;
    }
  }

  public CASContainsResponse getCasContainsResponse() {
    return this.casContainsResponse;
  }

  public FrontendResponse setCasContainsResponse(CASContainsResponse casContainsResponse) {
    this.casContainsResponse = casContainsResponse;
    return this;
  }

  public void unsetCasContainsResponse() {
    this.casContainsResponse = null;
  }

  /** Returns true if field casContainsResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetCasContainsResponse() {
    return this.casContainsResponse != null;
  }

  public void setCasContainsResponseIsSet(boolean value) {
    if (!value) {
      this.casContainsResponse = null;
    }
  }

  public CreateBuildResponse getCreateBuildResponse() {
    return this.createBuildResponse;
  }

  public FrontendResponse setCreateBuildResponse(CreateBuildResponse createBuildResponse) {
    this.createBuildResponse = createBuildResponse;
    return this;
  }

  public void unsetCreateBuildResponse() {
    this.createBuildResponse = null;
  }

  /** Returns true if field createBuildResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateBuildResponse() {
    return this.createBuildResponse != null;
  }

  public void setCreateBuildResponseIsSet(boolean value) {
    if (!value) {
      this.createBuildResponse = null;
    }
  }

  public FetchSourceFilesResponse getFetchSourceFilesResponse() {
    return this.fetchSourceFilesResponse;
  }

  public FrontendResponse setFetchSourceFilesResponse(FetchSourceFilesResponse fetchSourceFilesResponse) {
    this.fetchSourceFilesResponse = fetchSourceFilesResponse;
    return this;
  }

  public void unsetFetchSourceFilesResponse() {
    this.fetchSourceFilesResponse = null;
  }

  /** Returns true if field fetchSourceFilesResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSourceFilesResponse() {
    return this.fetchSourceFilesResponse != null;
  }

  public void setFetchSourceFilesResponseIsSet(boolean value) {
    if (!value) {
      this.fetchSourceFilesResponse = null;
    }
  }

  public FetchBuildGraphResponse getFetchBuildGraphResponse() {
    return this.fetchBuildGraphResponse;
  }

  public FrontendResponse setFetchBuildGraphResponse(FetchBuildGraphResponse fetchBuildGraphResponse) {
    this.fetchBuildGraphResponse = fetchBuildGraphResponse;
    return this;
  }

  public void unsetFetchBuildGraphResponse() {
    this.fetchBuildGraphResponse = null;
  }

  /** Returns true if field fetchBuildGraphResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchBuildGraphResponse() {
    return this.fetchBuildGraphResponse != null;
  }

  public void setFetchBuildGraphResponseIsSet(boolean value) {
    if (!value) {
      this.fetchBuildGraphResponse = null;
    }
  }

  public AnnouncementResponse getAnnouncementResponse() {
    return this.announcementResponse;
  }

  public FrontendResponse setAnnouncementResponse(AnnouncementResponse announcementResponse) {
    this.announcementResponse = announcementResponse;
    return this;
  }

  public void unsetAnnouncementResponse() {
    this.announcementResponse = null;
  }

  /** Returns true if field announcementResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnouncementResponse() {
    return this.announcementResponse != null;
  }

  public void setAnnouncementResponseIsSet(boolean value) {
    if (!value) {
      this.announcementResponse = null;
    }
  }

  public MultiGetBuildSlaveLogDirResponse getMultiGetBuildSlaveLogDirResponse() {
    return this.multiGetBuildSlaveLogDirResponse;
  }

  public FrontendResponse setMultiGetBuildSlaveLogDirResponse(MultiGetBuildSlaveLogDirResponse multiGetBuildSlaveLogDirResponse) {
    this.multiGetBuildSlaveLogDirResponse = multiGetBuildSlaveLogDirResponse;
    return this;
  }

  public void unsetMultiGetBuildSlaveLogDirResponse() {
    this.multiGetBuildSlaveLogDirResponse = null;
  }

  /** Returns true if field multiGetBuildSlaveLogDirResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiGetBuildSlaveLogDirResponse() {
    return this.multiGetBuildSlaveLogDirResponse != null;
  }

  public void setMultiGetBuildSlaveLogDirResponseIsSet(boolean value) {
    if (!value) {
      this.multiGetBuildSlaveLogDirResponse = null;
    }
  }

  public MultiGetBuildSlaveRealTimeLogsResponse getMultiGetBuildSlaveRealTimeLogsResponse() {
    return this.multiGetBuildSlaveRealTimeLogsResponse;
  }

  public FrontendResponse setMultiGetBuildSlaveRealTimeLogsResponse(MultiGetBuildSlaveRealTimeLogsResponse multiGetBuildSlaveRealTimeLogsResponse) {
    this.multiGetBuildSlaveRealTimeLogsResponse = multiGetBuildSlaveRealTimeLogsResponse;
    return this;
  }

  public void unsetMultiGetBuildSlaveRealTimeLogsResponse() {
    this.multiGetBuildSlaveRealTimeLogsResponse = null;
  }

  /** Returns true if field multiGetBuildSlaveRealTimeLogsResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiGetBuildSlaveRealTimeLogsResponse() {
    return this.multiGetBuildSlaveRealTimeLogsResponse != null;
  }

  public void setMultiGetBuildSlaveRealTimeLogsResponseIsSet(boolean value) {
    if (!value) {
      this.multiGetBuildSlaveRealTimeLogsResponse = null;
    }
  }

  public UpdateBuildSlaveStatusResponse getUpdateBuildSlaveStatusResponse() {
    return this.updateBuildSlaveStatusResponse;
  }

  public FrontendResponse setUpdateBuildSlaveStatusResponse(UpdateBuildSlaveStatusResponse updateBuildSlaveStatusResponse) {
    this.updateBuildSlaveStatusResponse = updateBuildSlaveStatusResponse;
    return this;
  }

  public void unsetUpdateBuildSlaveStatusResponse() {
    this.updateBuildSlaveStatusResponse = null;
  }

  /** Returns true if field updateBuildSlaveStatusResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateBuildSlaveStatusResponse() {
    return this.updateBuildSlaveStatusResponse != null;
  }

  public void setUpdateBuildSlaveStatusResponseIsSet(boolean value) {
    if (!value) {
      this.updateBuildSlaveStatusResponse = null;
    }
  }

  public FetchBuildSlaveStatusResponse getFetchBuildSlaveStatusResponse() {
    return this.fetchBuildSlaveStatusResponse;
  }

  public FrontendResponse setFetchBuildSlaveStatusResponse(FetchBuildSlaveStatusResponse fetchBuildSlaveStatusResponse) {
    this.fetchBuildSlaveStatusResponse = fetchBuildSlaveStatusResponse;
    return this;
  }

  public void unsetFetchBuildSlaveStatusResponse() {
    this.fetchBuildSlaveStatusResponse = null;
  }

  /** Returns true if field fetchBuildSlaveStatusResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchBuildSlaveStatusResponse() {
    return this.fetchBuildSlaveStatusResponse != null;
  }

  public void setFetchBuildSlaveStatusResponseIsSet(boolean value) {
    if (!value) {
      this.fetchBuildSlaveStatusResponse = null;
    }
  }

  public AppendBuildSlaveEventsResponse getAppendBuildSlaveEventsResponse() {
    return this.appendBuildSlaveEventsResponse;
  }

  public FrontendResponse setAppendBuildSlaveEventsResponse(AppendBuildSlaveEventsResponse appendBuildSlaveEventsResponse) {
    this.appendBuildSlaveEventsResponse = appendBuildSlaveEventsResponse;
    return this;
  }

  public void unsetAppendBuildSlaveEventsResponse() {
    this.appendBuildSlaveEventsResponse = null;
  }

  /** Returns true if field appendBuildSlaveEventsResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendBuildSlaveEventsResponse() {
    return this.appendBuildSlaveEventsResponse != null;
  }

  public void setAppendBuildSlaveEventsResponseIsSet(boolean value) {
    if (!value) {
      this.appendBuildSlaveEventsResponse = null;
    }
  }

  public MultiGetBuildSlaveEventsResponse getMultiGetBuildSlaveEventsResponse() {
    return this.multiGetBuildSlaveEventsResponse;
  }

  public FrontendResponse setMultiGetBuildSlaveEventsResponse(MultiGetBuildSlaveEventsResponse multiGetBuildSlaveEventsResponse) {
    this.multiGetBuildSlaveEventsResponse = multiGetBuildSlaveEventsResponse;
    return this;
  }

  public void unsetMultiGetBuildSlaveEventsResponse() {
    this.multiGetBuildSlaveEventsResponse = null;
  }

  /** Returns true if field multiGetBuildSlaveEventsResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiGetBuildSlaveEventsResponse() {
    return this.multiGetBuildSlaveEventsResponse != null;
  }

  public void setMultiGetBuildSlaveEventsResponseIsSet(boolean value) {
    if (!value) {
      this.multiGetBuildSlaveEventsResponse = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WAS_SUCCESSFUL:
      if (value == null) {
        unsetWasSuccessful();
      } else {
        setWasSuccessful((Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FrontendRequestType)value);
      }
      break;

    case START_BUILD_RESPONSE:
      if (value == null) {
        unsetStartBuildResponse();
      } else {
        setStartBuildResponse((StartBuildResponse)value);
      }
      break;

    case BUILD_STATUS_RESPONSE:
      if (value == null) {
        unsetBuildStatusResponse();
      } else {
        setBuildStatusResponse((BuildStatusResponse)value);
      }
      break;

    case CAS_CONTAINS_RESPONSE:
      if (value == null) {
        unsetCasContainsResponse();
      } else {
        setCasContainsResponse((CASContainsResponse)value);
      }
      break;

    case CREATE_BUILD_RESPONSE:
      if (value == null) {
        unsetCreateBuildResponse();
      } else {
        setCreateBuildResponse((CreateBuildResponse)value);
      }
      break;

    case FETCH_SOURCE_FILES_RESPONSE:
      if (value == null) {
        unsetFetchSourceFilesResponse();
      } else {
        setFetchSourceFilesResponse((FetchSourceFilesResponse)value);
      }
      break;

    case FETCH_BUILD_GRAPH_RESPONSE:
      if (value == null) {
        unsetFetchBuildGraphResponse();
      } else {
        setFetchBuildGraphResponse((FetchBuildGraphResponse)value);
      }
      break;

    case ANNOUNCEMENT_RESPONSE:
      if (value == null) {
        unsetAnnouncementResponse();
      } else {
        setAnnouncementResponse((AnnouncementResponse)value);
      }
      break;

    case MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE:
      if (value == null) {
        unsetMultiGetBuildSlaveLogDirResponse();
      } else {
        setMultiGetBuildSlaveLogDirResponse((MultiGetBuildSlaveLogDirResponse)value);
      }
      break;

    case MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE:
      if (value == null) {
        unsetMultiGetBuildSlaveRealTimeLogsResponse();
      } else {
        setMultiGetBuildSlaveRealTimeLogsResponse((MultiGetBuildSlaveRealTimeLogsResponse)value);
      }
      break;

    case UPDATE_BUILD_SLAVE_STATUS_RESPONSE:
      if (value == null) {
        unsetUpdateBuildSlaveStatusResponse();
      } else {
        setUpdateBuildSlaveStatusResponse((UpdateBuildSlaveStatusResponse)value);
      }
      break;

    case FETCH_BUILD_SLAVE_STATUS_RESPONSE:
      if (value == null) {
        unsetFetchBuildSlaveStatusResponse();
      } else {
        setFetchBuildSlaveStatusResponse((FetchBuildSlaveStatusResponse)value);
      }
      break;

    case APPEND_BUILD_SLAVE_EVENTS_RESPONSE:
      if (value == null) {
        unsetAppendBuildSlaveEventsResponse();
      } else {
        setAppendBuildSlaveEventsResponse((AppendBuildSlaveEventsResponse)value);
      }
      break;

    case MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE:
      if (value == null) {
        unsetMultiGetBuildSlaveEventsResponse();
      } else {
        setMultiGetBuildSlaveEventsResponse((MultiGetBuildSlaveEventsResponse)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WAS_SUCCESSFUL:
      return isWasSuccessful();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case TYPE:
      return getType();

    case START_BUILD_RESPONSE:
      return getStartBuildResponse();

    case BUILD_STATUS_RESPONSE:
      return getBuildStatusResponse();

    case CAS_CONTAINS_RESPONSE:
      return getCasContainsResponse();

    case CREATE_BUILD_RESPONSE:
      return getCreateBuildResponse();

    case FETCH_SOURCE_FILES_RESPONSE:
      return getFetchSourceFilesResponse();

    case FETCH_BUILD_GRAPH_RESPONSE:
      return getFetchBuildGraphResponse();

    case ANNOUNCEMENT_RESPONSE:
      return getAnnouncementResponse();

    case MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE:
      return getMultiGetBuildSlaveLogDirResponse();

    case MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE:
      return getMultiGetBuildSlaveRealTimeLogsResponse();

    case UPDATE_BUILD_SLAVE_STATUS_RESPONSE:
      return getUpdateBuildSlaveStatusResponse();

    case FETCH_BUILD_SLAVE_STATUS_RESPONSE:
      return getFetchBuildSlaveStatusResponse();

    case APPEND_BUILD_SLAVE_EVENTS_RESPONSE:
      return getAppendBuildSlaveEventsResponse();

    case MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE:
      return getMultiGetBuildSlaveEventsResponse();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WAS_SUCCESSFUL:
      return isSetWasSuccessful();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case TYPE:
      return isSetType();
    case START_BUILD_RESPONSE:
      return isSetStartBuildResponse();
    case BUILD_STATUS_RESPONSE:
      return isSetBuildStatusResponse();
    case CAS_CONTAINS_RESPONSE:
      return isSetCasContainsResponse();
    case CREATE_BUILD_RESPONSE:
      return isSetCreateBuildResponse();
    case FETCH_SOURCE_FILES_RESPONSE:
      return isSetFetchSourceFilesResponse();
    case FETCH_BUILD_GRAPH_RESPONSE:
      return isSetFetchBuildGraphResponse();
    case ANNOUNCEMENT_RESPONSE:
      return isSetAnnouncementResponse();
    case MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE:
      return isSetMultiGetBuildSlaveLogDirResponse();
    case MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE:
      return isSetMultiGetBuildSlaveRealTimeLogsResponse();
    case UPDATE_BUILD_SLAVE_STATUS_RESPONSE:
      return isSetUpdateBuildSlaveStatusResponse();
    case FETCH_BUILD_SLAVE_STATUS_RESPONSE:
      return isSetFetchBuildSlaveStatusResponse();
    case APPEND_BUILD_SLAVE_EVENTS_RESPONSE:
      return isSetAppendBuildSlaveEventsResponse();
    case MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE:
      return isSetMultiGetBuildSlaveEventsResponse();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FrontendResponse)
      return this.equals((FrontendResponse)that);
    return false;
  }

  public boolean equals(FrontendResponse that) {
    if (that == null)
      return false;

    boolean this_present_wasSuccessful = true && this.isSetWasSuccessful();
    boolean that_present_wasSuccessful = true && that.isSetWasSuccessful();
    if (this_present_wasSuccessful || that_present_wasSuccessful) {
      if (!(this_present_wasSuccessful && that_present_wasSuccessful))
        return false;
      if (this.wasSuccessful != that.wasSuccessful)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_startBuildResponse = true && this.isSetStartBuildResponse();
    boolean that_present_startBuildResponse = true && that.isSetStartBuildResponse();
    if (this_present_startBuildResponse || that_present_startBuildResponse) {
      if (!(this_present_startBuildResponse && that_present_startBuildResponse))
        return false;
      if (!this.startBuildResponse.equals(that.startBuildResponse))
        return false;
    }

    boolean this_present_buildStatusResponse = true && this.isSetBuildStatusResponse();
    boolean that_present_buildStatusResponse = true && that.isSetBuildStatusResponse();
    if (this_present_buildStatusResponse || that_present_buildStatusResponse) {
      if (!(this_present_buildStatusResponse && that_present_buildStatusResponse))
        return false;
      if (!this.buildStatusResponse.equals(that.buildStatusResponse))
        return false;
    }

    boolean this_present_casContainsResponse = true && this.isSetCasContainsResponse();
    boolean that_present_casContainsResponse = true && that.isSetCasContainsResponse();
    if (this_present_casContainsResponse || that_present_casContainsResponse) {
      if (!(this_present_casContainsResponse && that_present_casContainsResponse))
        return false;
      if (!this.casContainsResponse.equals(that.casContainsResponse))
        return false;
    }

    boolean this_present_createBuildResponse = true && this.isSetCreateBuildResponse();
    boolean that_present_createBuildResponse = true && that.isSetCreateBuildResponse();
    if (this_present_createBuildResponse || that_present_createBuildResponse) {
      if (!(this_present_createBuildResponse && that_present_createBuildResponse))
        return false;
      if (!this.createBuildResponse.equals(that.createBuildResponse))
        return false;
    }

    boolean this_present_fetchSourceFilesResponse = true && this.isSetFetchSourceFilesResponse();
    boolean that_present_fetchSourceFilesResponse = true && that.isSetFetchSourceFilesResponse();
    if (this_present_fetchSourceFilesResponse || that_present_fetchSourceFilesResponse) {
      if (!(this_present_fetchSourceFilesResponse && that_present_fetchSourceFilesResponse))
        return false;
      if (!this.fetchSourceFilesResponse.equals(that.fetchSourceFilesResponse))
        return false;
    }

    boolean this_present_fetchBuildGraphResponse = true && this.isSetFetchBuildGraphResponse();
    boolean that_present_fetchBuildGraphResponse = true && that.isSetFetchBuildGraphResponse();
    if (this_present_fetchBuildGraphResponse || that_present_fetchBuildGraphResponse) {
      if (!(this_present_fetchBuildGraphResponse && that_present_fetchBuildGraphResponse))
        return false;
      if (!this.fetchBuildGraphResponse.equals(that.fetchBuildGraphResponse))
        return false;
    }

    boolean this_present_announcementResponse = true && this.isSetAnnouncementResponse();
    boolean that_present_announcementResponse = true && that.isSetAnnouncementResponse();
    if (this_present_announcementResponse || that_present_announcementResponse) {
      if (!(this_present_announcementResponse && that_present_announcementResponse))
        return false;
      if (!this.announcementResponse.equals(that.announcementResponse))
        return false;
    }

    boolean this_present_multiGetBuildSlaveLogDirResponse = true && this.isSetMultiGetBuildSlaveLogDirResponse();
    boolean that_present_multiGetBuildSlaveLogDirResponse = true && that.isSetMultiGetBuildSlaveLogDirResponse();
    if (this_present_multiGetBuildSlaveLogDirResponse || that_present_multiGetBuildSlaveLogDirResponse) {
      if (!(this_present_multiGetBuildSlaveLogDirResponse && that_present_multiGetBuildSlaveLogDirResponse))
        return false;
      if (!this.multiGetBuildSlaveLogDirResponse.equals(that.multiGetBuildSlaveLogDirResponse))
        return false;
    }

    boolean this_present_multiGetBuildSlaveRealTimeLogsResponse = true && this.isSetMultiGetBuildSlaveRealTimeLogsResponse();
    boolean that_present_multiGetBuildSlaveRealTimeLogsResponse = true && that.isSetMultiGetBuildSlaveRealTimeLogsResponse();
    if (this_present_multiGetBuildSlaveRealTimeLogsResponse || that_present_multiGetBuildSlaveRealTimeLogsResponse) {
      if (!(this_present_multiGetBuildSlaveRealTimeLogsResponse && that_present_multiGetBuildSlaveRealTimeLogsResponse))
        return false;
      if (!this.multiGetBuildSlaveRealTimeLogsResponse.equals(that.multiGetBuildSlaveRealTimeLogsResponse))
        return false;
    }

    boolean this_present_updateBuildSlaveStatusResponse = true && this.isSetUpdateBuildSlaveStatusResponse();
    boolean that_present_updateBuildSlaveStatusResponse = true && that.isSetUpdateBuildSlaveStatusResponse();
    if (this_present_updateBuildSlaveStatusResponse || that_present_updateBuildSlaveStatusResponse) {
      if (!(this_present_updateBuildSlaveStatusResponse && that_present_updateBuildSlaveStatusResponse))
        return false;
      if (!this.updateBuildSlaveStatusResponse.equals(that.updateBuildSlaveStatusResponse))
        return false;
    }

    boolean this_present_fetchBuildSlaveStatusResponse = true && this.isSetFetchBuildSlaveStatusResponse();
    boolean that_present_fetchBuildSlaveStatusResponse = true && that.isSetFetchBuildSlaveStatusResponse();
    if (this_present_fetchBuildSlaveStatusResponse || that_present_fetchBuildSlaveStatusResponse) {
      if (!(this_present_fetchBuildSlaveStatusResponse && that_present_fetchBuildSlaveStatusResponse))
        return false;
      if (!this.fetchBuildSlaveStatusResponse.equals(that.fetchBuildSlaveStatusResponse))
        return false;
    }

    boolean this_present_appendBuildSlaveEventsResponse = true && this.isSetAppendBuildSlaveEventsResponse();
    boolean that_present_appendBuildSlaveEventsResponse = true && that.isSetAppendBuildSlaveEventsResponse();
    if (this_present_appendBuildSlaveEventsResponse || that_present_appendBuildSlaveEventsResponse) {
      if (!(this_present_appendBuildSlaveEventsResponse && that_present_appendBuildSlaveEventsResponse))
        return false;
      if (!this.appendBuildSlaveEventsResponse.equals(that.appendBuildSlaveEventsResponse))
        return false;
    }

    boolean this_present_multiGetBuildSlaveEventsResponse = true && this.isSetMultiGetBuildSlaveEventsResponse();
    boolean that_present_multiGetBuildSlaveEventsResponse = true && that.isSetMultiGetBuildSlaveEventsResponse();
    if (this_present_multiGetBuildSlaveEventsResponse || that_present_multiGetBuildSlaveEventsResponse) {
      if (!(this_present_multiGetBuildSlaveEventsResponse && that_present_multiGetBuildSlaveEventsResponse))
        return false;
      if (!this.multiGetBuildSlaveEventsResponse.equals(that.multiGetBuildSlaveEventsResponse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wasSuccessful = true && (isSetWasSuccessful());
    list.add(present_wasSuccessful);
    if (present_wasSuccessful)
      list.add(wasSuccessful);

    boolean present_errorMessage = true && (isSetErrorMessage());
    list.add(present_errorMessage);
    if (present_errorMessage)
      list.add(errorMessage);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_startBuildResponse = true && (isSetStartBuildResponse());
    list.add(present_startBuildResponse);
    if (present_startBuildResponse)
      list.add(startBuildResponse);

    boolean present_buildStatusResponse = true && (isSetBuildStatusResponse());
    list.add(present_buildStatusResponse);
    if (present_buildStatusResponse)
      list.add(buildStatusResponse);

    boolean present_casContainsResponse = true && (isSetCasContainsResponse());
    list.add(present_casContainsResponse);
    if (present_casContainsResponse)
      list.add(casContainsResponse);

    boolean present_createBuildResponse = true && (isSetCreateBuildResponse());
    list.add(present_createBuildResponse);
    if (present_createBuildResponse)
      list.add(createBuildResponse);

    boolean present_fetchSourceFilesResponse = true && (isSetFetchSourceFilesResponse());
    list.add(present_fetchSourceFilesResponse);
    if (present_fetchSourceFilesResponse)
      list.add(fetchSourceFilesResponse);

    boolean present_fetchBuildGraphResponse = true && (isSetFetchBuildGraphResponse());
    list.add(present_fetchBuildGraphResponse);
    if (present_fetchBuildGraphResponse)
      list.add(fetchBuildGraphResponse);

    boolean present_announcementResponse = true && (isSetAnnouncementResponse());
    list.add(present_announcementResponse);
    if (present_announcementResponse)
      list.add(announcementResponse);

    boolean present_multiGetBuildSlaveLogDirResponse = true && (isSetMultiGetBuildSlaveLogDirResponse());
    list.add(present_multiGetBuildSlaveLogDirResponse);
    if (present_multiGetBuildSlaveLogDirResponse)
      list.add(multiGetBuildSlaveLogDirResponse);

    boolean present_multiGetBuildSlaveRealTimeLogsResponse = true && (isSetMultiGetBuildSlaveRealTimeLogsResponse());
    list.add(present_multiGetBuildSlaveRealTimeLogsResponse);
    if (present_multiGetBuildSlaveRealTimeLogsResponse)
      list.add(multiGetBuildSlaveRealTimeLogsResponse);

    boolean present_updateBuildSlaveStatusResponse = true && (isSetUpdateBuildSlaveStatusResponse());
    list.add(present_updateBuildSlaveStatusResponse);
    if (present_updateBuildSlaveStatusResponse)
      list.add(updateBuildSlaveStatusResponse);

    boolean present_fetchBuildSlaveStatusResponse = true && (isSetFetchBuildSlaveStatusResponse());
    list.add(present_fetchBuildSlaveStatusResponse);
    if (present_fetchBuildSlaveStatusResponse)
      list.add(fetchBuildSlaveStatusResponse);

    boolean present_appendBuildSlaveEventsResponse = true && (isSetAppendBuildSlaveEventsResponse());
    list.add(present_appendBuildSlaveEventsResponse);
    if (present_appendBuildSlaveEventsResponse)
      list.add(appendBuildSlaveEventsResponse);

    boolean present_multiGetBuildSlaveEventsResponse = true && (isSetMultiGetBuildSlaveEventsResponse());
    list.add(present_multiGetBuildSlaveEventsResponse);
    if (present_multiGetBuildSlaveEventsResponse)
      list.add(multiGetBuildSlaveEventsResponse);

    return list.hashCode();
  }

  @Override
  public int compareTo(FrontendResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWasSuccessful()).compareTo(other.isSetWasSuccessful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWasSuccessful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wasSuccessful, other.wasSuccessful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartBuildResponse()).compareTo(other.isSetStartBuildResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartBuildResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startBuildResponse, other.startBuildResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuildStatusResponse()).compareTo(other.isSetBuildStatusResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildStatusResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildStatusResponse, other.buildStatusResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCasContainsResponse()).compareTo(other.isSetCasContainsResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCasContainsResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.casContainsResponse, other.casContainsResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateBuildResponse()).compareTo(other.isSetCreateBuildResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateBuildResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBuildResponse, other.createBuildResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSourceFilesResponse()).compareTo(other.isSetFetchSourceFilesResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSourceFilesResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSourceFilesResponse, other.fetchSourceFilesResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchBuildGraphResponse()).compareTo(other.isSetFetchBuildGraphResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchBuildGraphResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchBuildGraphResponse, other.fetchBuildGraphResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnouncementResponse()).compareTo(other.isSetAnnouncementResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnouncementResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announcementResponse, other.announcementResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiGetBuildSlaveLogDirResponse()).compareTo(other.isSetMultiGetBuildSlaveLogDirResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiGetBuildSlaveLogDirResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiGetBuildSlaveLogDirResponse, other.multiGetBuildSlaveLogDirResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiGetBuildSlaveRealTimeLogsResponse()).compareTo(other.isSetMultiGetBuildSlaveRealTimeLogsResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiGetBuildSlaveRealTimeLogsResponse, other.multiGetBuildSlaveRealTimeLogsResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateBuildSlaveStatusResponse()).compareTo(other.isSetUpdateBuildSlaveStatusResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateBuildSlaveStatusResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateBuildSlaveStatusResponse, other.updateBuildSlaveStatusResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchBuildSlaveStatusResponse()).compareTo(other.isSetFetchBuildSlaveStatusResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchBuildSlaveStatusResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchBuildSlaveStatusResponse, other.fetchBuildSlaveStatusResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendBuildSlaveEventsResponse()).compareTo(other.isSetAppendBuildSlaveEventsResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendBuildSlaveEventsResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendBuildSlaveEventsResponse, other.appendBuildSlaveEventsResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiGetBuildSlaveEventsResponse()).compareTo(other.isSetMultiGetBuildSlaveEventsResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiGetBuildSlaveEventsResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiGetBuildSlaveEventsResponse, other.multiGetBuildSlaveEventsResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FrontendResponse(");
    boolean first = true;

    if (isSetWasSuccessful()) {
      sb.append("wasSuccessful:");
      sb.append(this.wasSuccessful);
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetStartBuildResponse()) {
      if (!first) sb.append(", ");
      sb.append("startBuildResponse:");
      if (this.startBuildResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.startBuildResponse);
      }
      first = false;
    }
    if (isSetBuildStatusResponse()) {
      if (!first) sb.append(", ");
      sb.append("buildStatusResponse:");
      if (this.buildStatusResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.buildStatusResponse);
      }
      first = false;
    }
    if (isSetCasContainsResponse()) {
      if (!first) sb.append(", ");
      sb.append("casContainsResponse:");
      if (this.casContainsResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.casContainsResponse);
      }
      first = false;
    }
    if (isSetCreateBuildResponse()) {
      if (!first) sb.append(", ");
      sb.append("createBuildResponse:");
      if (this.createBuildResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.createBuildResponse);
      }
      first = false;
    }
    if (isSetFetchSourceFilesResponse()) {
      if (!first) sb.append(", ");
      sb.append("fetchSourceFilesResponse:");
      if (this.fetchSourceFilesResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchSourceFilesResponse);
      }
      first = false;
    }
    if (isSetFetchBuildGraphResponse()) {
      if (!first) sb.append(", ");
      sb.append("fetchBuildGraphResponse:");
      if (this.fetchBuildGraphResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchBuildGraphResponse);
      }
      first = false;
    }
    if (isSetAnnouncementResponse()) {
      if (!first) sb.append(", ");
      sb.append("announcementResponse:");
      if (this.announcementResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.announcementResponse);
      }
      first = false;
    }
    if (isSetMultiGetBuildSlaveLogDirResponse()) {
      if (!first) sb.append(", ");
      sb.append("multiGetBuildSlaveLogDirResponse:");
      if (this.multiGetBuildSlaveLogDirResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.multiGetBuildSlaveLogDirResponse);
      }
      first = false;
    }
    if (isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
      if (!first) sb.append(", ");
      sb.append("multiGetBuildSlaveRealTimeLogsResponse:");
      if (this.multiGetBuildSlaveRealTimeLogsResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.multiGetBuildSlaveRealTimeLogsResponse);
      }
      first = false;
    }
    if (isSetUpdateBuildSlaveStatusResponse()) {
      if (!first) sb.append(", ");
      sb.append("updateBuildSlaveStatusResponse:");
      if (this.updateBuildSlaveStatusResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.updateBuildSlaveStatusResponse);
      }
      first = false;
    }
    if (isSetFetchBuildSlaveStatusResponse()) {
      if (!first) sb.append(", ");
      sb.append("fetchBuildSlaveStatusResponse:");
      if (this.fetchBuildSlaveStatusResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchBuildSlaveStatusResponse);
      }
      first = false;
    }
    if (isSetAppendBuildSlaveEventsResponse()) {
      if (!first) sb.append(", ");
      sb.append("appendBuildSlaveEventsResponse:");
      if (this.appendBuildSlaveEventsResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.appendBuildSlaveEventsResponse);
      }
      first = false;
    }
    if (isSetMultiGetBuildSlaveEventsResponse()) {
      if (!first) sb.append(", ");
      sb.append("multiGetBuildSlaveEventsResponse:");
      if (this.multiGetBuildSlaveEventsResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.multiGetBuildSlaveEventsResponse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startBuildResponse != null) {
      startBuildResponse.validate();
    }
    if (buildStatusResponse != null) {
      buildStatusResponse.validate();
    }
    if (casContainsResponse != null) {
      casContainsResponse.validate();
    }
    if (createBuildResponse != null) {
      createBuildResponse.validate();
    }
    if (fetchSourceFilesResponse != null) {
      fetchSourceFilesResponse.validate();
    }
    if (fetchBuildGraphResponse != null) {
      fetchBuildGraphResponse.validate();
    }
    if (announcementResponse != null) {
      announcementResponse.validate();
    }
    if (multiGetBuildSlaveLogDirResponse != null) {
      multiGetBuildSlaveLogDirResponse.validate();
    }
    if (multiGetBuildSlaveRealTimeLogsResponse != null) {
      multiGetBuildSlaveRealTimeLogsResponse.validate();
    }
    if (updateBuildSlaveStatusResponse != null) {
      updateBuildSlaveStatusResponse.validate();
    }
    if (fetchBuildSlaveStatusResponse != null) {
      fetchBuildSlaveStatusResponse.validate();
    }
    if (appendBuildSlaveEventsResponse != null) {
      appendBuildSlaveEventsResponse.validate();
    }
    if (multiGetBuildSlaveEventsResponse != null) {
      multiGetBuildSlaveEventsResponse.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FrontendResponseStandardSchemeFactory implements SchemeFactory {
    public FrontendResponseStandardScheme getScheme() {
      return new FrontendResponseStandardScheme();
    }
  }

  private static class FrontendResponseStandardScheme extends StandardScheme<FrontendResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FrontendResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAS_SUCCESSFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wasSuccessful = iprot.readBool();
              struct.setWasSuccessfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_BUILD_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startBuildResponse = new StartBuildResponse();
              struct.startBuildResponse.read(iprot);
              struct.setStartBuildResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUILD_STATUS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buildStatusResponse = new BuildStatusResponse();
              struct.buildStatusResponse.read(iprot);
              struct.setBuildStatusResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CAS_CONTAINS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.casContainsResponse = new CASContainsResponse();
              struct.casContainsResponse.read(iprot);
              struct.setCasContainsResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_BUILD_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.createBuildResponse = new CreateBuildResponse();
              struct.createBuildResponse.read(iprot);
              struct.setCreateBuildResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FETCH_SOURCE_FILES_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchSourceFilesResponse = new FetchSourceFilesResponse();
              struct.fetchSourceFilesResponse.read(iprot);
              struct.setFetchSourceFilesResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FETCH_BUILD_GRAPH_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchBuildGraphResponse = new FetchBuildGraphResponse();
              struct.fetchBuildGraphResponse.read(iprot);
              struct.setFetchBuildGraphResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ANNOUNCEMENT_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.announcementResponse = new AnnouncementResponse();
              struct.announcementResponse.read(iprot);
              struct.setAnnouncementResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiGetBuildSlaveLogDirResponse = new MultiGetBuildSlaveLogDirResponse();
              struct.multiGetBuildSlaveLogDirResponse.read(iprot);
              struct.setMultiGetBuildSlaveLogDirResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiGetBuildSlaveRealTimeLogsResponse = new MultiGetBuildSlaveRealTimeLogsResponse();
              struct.multiGetBuildSlaveRealTimeLogsResponse.read(iprot);
              struct.setMultiGetBuildSlaveRealTimeLogsResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_BUILD_SLAVE_STATUS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.updateBuildSlaveStatusResponse = new UpdateBuildSlaveStatusResponse();
              struct.updateBuildSlaveStatusResponse.read(iprot);
              struct.setUpdateBuildSlaveStatusResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FETCH_BUILD_SLAVE_STATUS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchBuildSlaveStatusResponse = new FetchBuildSlaveStatusResponse();
              struct.fetchBuildSlaveStatusResponse.read(iprot);
              struct.setFetchBuildSlaveStatusResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // APPEND_BUILD_SLAVE_EVENTS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.appendBuildSlaveEventsResponse = new AppendBuildSlaveEventsResponse();
              struct.appendBuildSlaveEventsResponse.read(iprot);
              struct.setAppendBuildSlaveEventsResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiGetBuildSlaveEventsResponse = new MultiGetBuildSlaveEventsResponse();
              struct.multiGetBuildSlaveEventsResponse.read(iprot);
              struct.setMultiGetBuildSlaveEventsResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FrontendResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWasSuccessful()) {
        oprot.writeFieldBegin(WAS_SUCCESSFUL_FIELD_DESC);
        oprot.writeBool(struct.wasSuccessful);
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startBuildResponse != null) {
        if (struct.isSetStartBuildResponse()) {
          oprot.writeFieldBegin(START_BUILD_RESPONSE_FIELD_DESC);
          struct.startBuildResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildStatusResponse != null) {
        if (struct.isSetBuildStatusResponse()) {
          oprot.writeFieldBegin(BUILD_STATUS_RESPONSE_FIELD_DESC);
          struct.buildStatusResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.casContainsResponse != null) {
        if (struct.isSetCasContainsResponse()) {
          oprot.writeFieldBegin(CAS_CONTAINS_RESPONSE_FIELD_DESC);
          struct.casContainsResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createBuildResponse != null) {
        if (struct.isSetCreateBuildResponse()) {
          oprot.writeFieldBegin(CREATE_BUILD_RESPONSE_FIELD_DESC);
          struct.createBuildResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchSourceFilesResponse != null) {
        if (struct.isSetFetchSourceFilesResponse()) {
          oprot.writeFieldBegin(FETCH_SOURCE_FILES_RESPONSE_FIELD_DESC);
          struct.fetchSourceFilesResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchBuildGraphResponse != null) {
        if (struct.isSetFetchBuildGraphResponse()) {
          oprot.writeFieldBegin(FETCH_BUILD_GRAPH_RESPONSE_FIELD_DESC);
          struct.fetchBuildGraphResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.announcementResponse != null) {
        if (struct.isSetAnnouncementResponse()) {
          oprot.writeFieldBegin(ANNOUNCEMENT_RESPONSE_FIELD_DESC);
          struct.announcementResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiGetBuildSlaveLogDirResponse != null) {
        if (struct.isSetMultiGetBuildSlaveLogDirResponse()) {
          oprot.writeFieldBegin(MULTI_GET_BUILD_SLAVE_LOG_DIR_RESPONSE_FIELD_DESC);
          struct.multiGetBuildSlaveLogDirResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiGetBuildSlaveRealTimeLogsResponse != null) {
        if (struct.isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
          oprot.writeFieldBegin(MULTI_GET_BUILD_SLAVE_REAL_TIME_LOGS_RESPONSE_FIELD_DESC);
          struct.multiGetBuildSlaveRealTimeLogsResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateBuildSlaveStatusResponse != null) {
        if (struct.isSetUpdateBuildSlaveStatusResponse()) {
          oprot.writeFieldBegin(UPDATE_BUILD_SLAVE_STATUS_RESPONSE_FIELD_DESC);
          struct.updateBuildSlaveStatusResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchBuildSlaveStatusResponse != null) {
        if (struct.isSetFetchBuildSlaveStatusResponse()) {
          oprot.writeFieldBegin(FETCH_BUILD_SLAVE_STATUS_RESPONSE_FIELD_DESC);
          struct.fetchBuildSlaveStatusResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appendBuildSlaveEventsResponse != null) {
        if (struct.isSetAppendBuildSlaveEventsResponse()) {
          oprot.writeFieldBegin(APPEND_BUILD_SLAVE_EVENTS_RESPONSE_FIELD_DESC);
          struct.appendBuildSlaveEventsResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiGetBuildSlaveEventsResponse != null) {
        if (struct.isSetMultiGetBuildSlaveEventsResponse()) {
          oprot.writeFieldBegin(MULTI_GET_BUILD_SLAVE_EVENTS_RESPONSE_FIELD_DESC);
          struct.multiGetBuildSlaveEventsResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FrontendResponseTupleSchemeFactory implements SchemeFactory {
    public FrontendResponseTupleScheme getScheme() {
      return new FrontendResponseTupleScheme();
    }
  }

  private static class FrontendResponseTupleScheme extends TupleScheme<FrontendResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FrontendResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWasSuccessful()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetStartBuildResponse()) {
        optionals.set(3);
      }
      if (struct.isSetBuildStatusResponse()) {
        optionals.set(4);
      }
      if (struct.isSetCasContainsResponse()) {
        optionals.set(5);
      }
      if (struct.isSetCreateBuildResponse()) {
        optionals.set(6);
      }
      if (struct.isSetFetchSourceFilesResponse()) {
        optionals.set(7);
      }
      if (struct.isSetFetchBuildGraphResponse()) {
        optionals.set(8);
      }
      if (struct.isSetAnnouncementResponse()) {
        optionals.set(9);
      }
      if (struct.isSetMultiGetBuildSlaveLogDirResponse()) {
        optionals.set(10);
      }
      if (struct.isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateBuildSlaveStatusResponse()) {
        optionals.set(12);
      }
      if (struct.isSetFetchBuildSlaveStatusResponse()) {
        optionals.set(13);
      }
      if (struct.isSetAppendBuildSlaveEventsResponse()) {
        optionals.set(14);
      }
      if (struct.isSetMultiGetBuildSlaveEventsResponse()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetWasSuccessful()) {
        oprot.writeBool(struct.wasSuccessful);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetStartBuildResponse()) {
        struct.startBuildResponse.write(oprot);
      }
      if (struct.isSetBuildStatusResponse()) {
        struct.buildStatusResponse.write(oprot);
      }
      if (struct.isSetCasContainsResponse()) {
        struct.casContainsResponse.write(oprot);
      }
      if (struct.isSetCreateBuildResponse()) {
        struct.createBuildResponse.write(oprot);
      }
      if (struct.isSetFetchSourceFilesResponse()) {
        struct.fetchSourceFilesResponse.write(oprot);
      }
      if (struct.isSetFetchBuildGraphResponse()) {
        struct.fetchBuildGraphResponse.write(oprot);
      }
      if (struct.isSetAnnouncementResponse()) {
        struct.announcementResponse.write(oprot);
      }
      if (struct.isSetMultiGetBuildSlaveLogDirResponse()) {
        struct.multiGetBuildSlaveLogDirResponse.write(oprot);
      }
      if (struct.isSetMultiGetBuildSlaveRealTimeLogsResponse()) {
        struct.multiGetBuildSlaveRealTimeLogsResponse.write(oprot);
      }
      if (struct.isSetUpdateBuildSlaveStatusResponse()) {
        struct.updateBuildSlaveStatusResponse.write(oprot);
      }
      if (struct.isSetFetchBuildSlaveStatusResponse()) {
        struct.fetchBuildSlaveStatusResponse.write(oprot);
      }
      if (struct.isSetAppendBuildSlaveEventsResponse()) {
        struct.appendBuildSlaveEventsResponse.write(oprot);
      }
      if (struct.isSetMultiGetBuildSlaveEventsResponse()) {
        struct.multiGetBuildSlaveEventsResponse.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FrontendResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.wasSuccessful = iprot.readBool();
        struct.setWasSuccessfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startBuildResponse = new StartBuildResponse();
        struct.startBuildResponse.read(iprot);
        struct.setStartBuildResponseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.buildStatusResponse = new BuildStatusResponse();
        struct.buildStatusResponse.read(iprot);
        struct.setBuildStatusResponseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.casContainsResponse = new CASContainsResponse();
        struct.casContainsResponse.read(iprot);
        struct.setCasContainsResponseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createBuildResponse = new CreateBuildResponse();
        struct.createBuildResponse.read(iprot);
        struct.setCreateBuildResponseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fetchSourceFilesResponse = new FetchSourceFilesResponse();
        struct.fetchSourceFilesResponse.read(iprot);
        struct.setFetchSourceFilesResponseIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fetchBuildGraphResponse = new FetchBuildGraphResponse();
        struct.fetchBuildGraphResponse.read(iprot);
        struct.setFetchBuildGraphResponseIsSet(true);
      }
      if (incoming.get(9)) {
        struct.announcementResponse = new AnnouncementResponse();
        struct.announcementResponse.read(iprot);
        struct.setAnnouncementResponseIsSet(true);
      }
      if (incoming.get(10)) {
        struct.multiGetBuildSlaveLogDirResponse = new MultiGetBuildSlaveLogDirResponse();
        struct.multiGetBuildSlaveLogDirResponse.read(iprot);
        struct.setMultiGetBuildSlaveLogDirResponseIsSet(true);
      }
      if (incoming.get(11)) {
        struct.multiGetBuildSlaveRealTimeLogsResponse = new MultiGetBuildSlaveRealTimeLogsResponse();
        struct.multiGetBuildSlaveRealTimeLogsResponse.read(iprot);
        struct.setMultiGetBuildSlaveRealTimeLogsResponseIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateBuildSlaveStatusResponse = new UpdateBuildSlaveStatusResponse();
        struct.updateBuildSlaveStatusResponse.read(iprot);
        struct.setUpdateBuildSlaveStatusResponseIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fetchBuildSlaveStatusResponse = new FetchBuildSlaveStatusResponse();
        struct.fetchBuildSlaveStatusResponse.read(iprot);
        struct.setFetchBuildSlaveStatusResponseIsSet(true);
      }
      if (incoming.get(14)) {
        struct.appendBuildSlaveEventsResponse = new AppendBuildSlaveEventsResponse();
        struct.appendBuildSlaveEventsResponse.read(iprot);
        struct.setAppendBuildSlaveEventsResponseIsSet(true);
      }
      if (incoming.get(15)) {
        struct.multiGetBuildSlaveEventsResponse = new MultiGetBuildSlaveEventsResponse();
        struct.multiGetBuildSlaveEventsResponse.read(iprot);
        struct.setMultiGetBuildSlaveEventsResponseIsSet(true);
      }
    }
  }

}

