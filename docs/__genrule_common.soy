{namespace genrule_common}

/***/
{template .srcs_arg}
{call buck.arg}
  {param name: 'srcs' /}
  {param default: '[]' /}
  {param desc}
  A list of files to be used in the shell command.
  {/param}
{/call}
{/template}

/***/
{template .cmd_arg}
{call buck.arg}
  {param name: 'cmd' /}
  {param default: 'None' /}
  {param desc}
  The shell command to run to generate the output file. It is the fallback of <code>bash</code>
  {sp}and <code>cmd_exe</code>.
  It will be subject to the following environment variable substitutions:
    <dl>
      <dt><code>SRCS</code><dt>
      <dd>A space-delimited string expansion of the <code>srcs</code>
      {sp}argument where each element of <code>srcs</code> will be
      translated into an absolute path.</dd>

      <dt><code>SRCDIR</code><dt>
      <dd>The absolute path to a directory to which sources are copied
      to prior to running the command.</dd>

      <dt><code>OUT</code></dt>
      <dd>The output file for the <code>genrule()</code>. The file
      specified by this variable must always be written by this
      command. If not, the execution of this rule will be considered a
      failure, halting the build process.</dd>
    </dl>

    It is also possible to expand references to other rules within the
    {sp}<code>cmd</code>, using builtin {call buck.string_parameter_macros /}.
    This expansion takes two supported forms:
    <dl>
      <dt><code>$(classpath /&#x2F;path/to:target)</code></dt>
      <dd>Expands a build rule for something that has a java classpath
      to the transitive classpath of that rule. If the rule does not
      have (or contribute to) a classpath, an exception will be thrown
      and the build will break.</dd>

      <dt><code>$(exe /&#x2F;path/to:target)</code></dt>
      <dd>Expands a build rule that results in an executable to the commands
      necessary to execute that command. For example, a <code>java_binary()
      </code> may expand to a call to <code>java -jar path/to/target.jar
      </code>. Files that are executable (perhaps generated by a <code>
      genrule()</code>) will also be expanded. If the build rule does
      not generate an executable output an exception will be thrown and
      the build will break.</dd>

      <dt><code>$(location /&#x2F;path/to:target)</code></dt>
      <dd>Expands to the location of the output of the build rule. This
      means that you can refer to these without needing to be aware of how
      Buck is storing data on the disk mid-build.</dd>

      {let $maven_coords}
        <groupId>:<artifactId>[:<extension>[:<classifier>]]:<version>
      {/let}
      <dt><code>$(maven_coords /&#x2F;path/to:target)</code></dt>
      <dd>Expands to the Maven coordinates for the build rule. This allows
      you to access the Maven coordinates for Maven-aware build rules. The
      format of the expansion is: <code>{$maven_coords}</code>
      </dd>
    </dl>

    Note that all build rules expanded in the command will be automatically
    considered to be dependencies of the <code>genrule()</code>.
  {/param}
{/call}
{/template}

/***/
{template .bash_arg}
{call buck.arg}
  {param name: 'bash' /}
  {param default: 'None' /}
  {param desc}
  The platform-specific version of parameter <code>cmd</code>.
  It runs on UNIX in which <code>bash</code> is installed and has a higher priority than
  {sp}<code>cmd</code>. Command specified will be run with <code>/bin/bash -c</code>.
  {/param}
{/call}
{/template}

/***/
{template .cmd_exe_arg}
{call buck.arg}
  {param name: 'cmd_exe' /}
  {param default: 'None' /}
  {param desc}
  The platform-specific version of parameter <code>cmd</code>. It runs on Windows and has a higher
  {sp}priority than <code>cmd</code>. Command specified will be run with <code>cmd.exe /c</code>.
  {/param}
{/call}
{/template}

/***/
{template .out_arg}
{call buck.arg}
  {param name: 'out' /}
  {param desc}
   The name of the output file or directory. Must be unique within the build file
   in which the <code>genrule()</code> is declared.
  {/param}
{/call}
{/template}

/***/
{template .type_arg}
{call buck.arg}
  {param name: 'type' /}
  {param default: 'None' /}
  {param desc}
   The type of this genrule. This is used for logging and is particularly useful for grouping
   different genrules that share an underlying logical "type".
  {/param}
{/call}
{/template}
