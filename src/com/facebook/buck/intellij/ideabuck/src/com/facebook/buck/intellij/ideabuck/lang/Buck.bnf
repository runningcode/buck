/*
 * Copyright 2015-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

{
  parserClass="com.facebook.buck.intellij.ideabuck.lang.BuckParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Buck"
  psiImplClassSuffix="Impl"
  psiPackage="com.facebook.buck.intellij.ideabuck.lang.psi"
  psiImplPackage="com.facebook.buck.intellij.ideabuck.lang.psi.impl"

  elementTypeHolderClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckTypes"
  elementTypeClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckElementType"
  tokenTypeClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckTokenType"

  tokens = [
    NONE = 'None'
    BOOLEAN = 'regexp:(True|False)'

    COMMA = ','
    EQUAL = '='
    SLASH = '\'
    COLUMN = ':'
    PLUS = '+'

    LINE_COMMENT = 'regexp:#.*'

    GLOB_KEYWORD = 'regexp:(glob|subdir_glob)'
    GLOB_INCLUDES_KEYWORD = 'includes'
    GLOB_INCLUDE_DOTFILES_KEYWORD = 'include_dotfiles'
    GLOB_EXCLUDES_KEYWORD = 'excludes'

    MACROS = "regexp:[A-Z_]([A-Z0-9_])+"

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    L_PARENTHESES = '('
    L_BRACKET = '['
    L_CURLY = '{'
    R_PARENTHESES = ')'
    R_BRACKET = ']'
    R_CURLY = '}'

    NUMBER = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
    IDENTIFIER = 'regexp:[:jletter:] [:jletterdigit:]*'
  ]
}

buckFile ::= item_*

private item_ ::= (rule_call | rule_block | property | LINE_COMMENT)

property_lvalue ::= IDENTIFIER | MACROS
property ::= property_lvalue '=' expression

// Only support "+" as operator right now.
private operator ::= PLUS
expression ::= (value operator)* [value | IDENTIFIER ]

private string ::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING

value ::= NONE | BOOLEAN | NUMBER | MACROS | string | value_array | list | object | glob_block | function_call

list ::= '(' list_elements ')'
list_elements ::= (value ',')* [value [',']]

object ::= '{' object_elements '}'
object_elements ::= (pair ',')* [pair [',']]
pair ::= string ':' value

value_array ::= '[' array_elements ']'
array_elements ::= (value ',')* [value [',']]

rule_name ::= IDENTIFIER
rule_block ::= rule_name '(' rule_body ')'
rule_body ::= (property ',')* [property [',']]

glob_block ::= GLOB_KEYWORD '(' glob_elements ')'
glob_elements ::= (glob_arguments ',')* [glob_arguments [',']]
glob_arguments ::= value | glob_keyword_argument
glob_keyword_argument ::= (GLOB_INCLUDES_KEYWORD | GLOB_EXCLUDES_KEYWORD | GLOB_INCLUDE_DOTFILES_KEYWORD) '=' expression

rule_call ::= rule_name '(' list_elements ')'

function_call ::= IDENTIFIER '(' ((string [',']) | (dictionary [',']))* ')'
dictionary ::= L_CURLY value COLUMN value [','] R_CURLY
