java_library(
  name = 'lib_c',
  srcs = [ 'C.java', 'D.java', ],
)

android_library(
  name = 'lib_a',
  srcs = [ 'A.java', ],
)

android_library(
  name = 'lib_b',
  srcs = [ 'B.java' ],
  deps = [ ':lib_c', ],
  annotation_processor_params = [
    #annotation_placeholder
  ]
)

android_resource(
  name = 'res',
  res = 'res',
  package = 'com.example',
)

android_library(
  name = 'top_level',
  srcs = [ 'TopLevel.java' ],
  deps = [
    ':lib_b',
    ':res',
    #placeholder
  ],
)

android_library(
  name = 'android_libraries',
  deps = [ ':top_level', ],
  deps_query = 'kind(android_library, deps($declared_deps))',
)

android_library(
  name = 'android_resources',
  deps = [ ':top_level', ],
  deps_query = 'kind(android_resource, deps($declared_deps))',
)

android_library(
  name = 'has_proc_params',
  deps = [ ':top_level', ],
  deps_query = 'attrfilter(annotation_processor_params, "example.foo=True", deps($declared_deps))',
)

android_library(
  name = 'java_libraries',
  srcs = [ 'UsesC.java', ],
  deps = [ ':top_level', ],
  deps_query = 'kind(java_library, deps($declared_deps))',
)

android_library(
  name = 'resources_from_query',
  srcs = [
    'UsesR.java',
  ],
  deps = [
    ':top_level',
  ],
  deps_query = 'kind(android_resource, deps($declared_deps))',
)

android_library(
  name = 'has_lib_c_from_provided_query',
  srcs = [
    'UsesC.java',
  ],
  provided_deps = [
    ':top_level',
  ],
  provided_deps_query = 'kind(java_library, deps($declared))',
)

android_library(
  name = 'provided_only',
  srcs = [ 'UsesC.java', ],
  provided_deps = [ ':lib_c', ],
)

android_library(
  name = 'no_provided_deps',
  srcs = [ 'UsesC.java', ],
  deps = [ ':provided_only', ],
  deps_query = 'classpath($declared_deps)',
)

java_binary(
  name = 'does_not_package_lib_c',
  deps = [
      ':has_lib_c_from_provided_query',
  ],
)

genrule(
  name = 'check_output_of_does_not_package_lib_c',
  cmd = 'echo `unzip -l $(location :does_not_package_lib_c)` > $OUT',
  out = 'out',
)